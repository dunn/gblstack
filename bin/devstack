#!/usr/bin/env ruby

require 'pathname'
require 'time'
require 'ostruct'
require 'pry'
require 'yaml'

class DevStack
  attr_accessor :context

  def initialize(argv)
    ENV['COMPOSE_PROJECT_NAME'] ||= 'devstack'
    @config_file = 'docker-compose.yml'
    @context = OpenStruct.new argv: argv, test_mode: false, flags: [], services: [], argz: []
    parse_command_line
    check_test_mode
  end

  def known_services
    @known_services ||= YAML.safe_load(File.read(compose_file))['services'].keys
  end

  def interpret_arg(arg)
    expanded = known_services & (dependencies[arg] || [arg])
    if expanded.empty?
      context.argz << arg
    else
      context.services += (expanded - context.services)
    end
  end

  def parse_command_line
    argv = context.argv
    context.flags << argv.shift while argv.first.to_s.start_with?('-')
    interpret_arg(argv.pop) while argv.length > 1 && !argv.last.start_with?('-')
  end

  def check_test_mode
    return if (['-t', '--test'] & context.flags.to_a).empty?
    ENV['COMPOSE_PROJECT_NAME'] += '_test'
    @config_file = 'docker-compose.test.yml'
    context.test_mode = true
  end

  def display_usage
    output = `docker-compose 2>&1`.split(/\nCommands:\n/).last
    commands = Hash[output.lines.collect { |line| line.strip.split(/\s+/, 2) }]
    commands['update'] = 'Pull the latest devstack command/configs from github'
    commands['version'] = 'Show the devstack version information'
    warn %(Usage:\n  devstack [-d|--debug] [-t|--test] [COMMAND] [ARGS...]\n\nCommands:)
    Hash[commands.sort].each_pair do |command, description|
      warn format('  %-18s %s', command, description)
    end
  end

  def version
    File.read(root.join('VERSION')).strip
  end

  def display_version
    Dir.chdir(root.to_s) do
      cmds = ['git fetch origin >/dev/null 2>&1', 'git rev-parse master', 'git rev-parse origin/master'].join(' && ')
      (local_rev, remote_rev) = `#{cmds}`.strip.split
      warn "devstack version #{version}, build #{local_rev[0..7]}\n" + `docker-compose version`
      return if local_rev == remote_rev
      remote_version = `git show origin/master:VERSION`.strip
      warn "\nVersion #{remote_version}, build #{remote_rev[0..7]} available."
      warn 'Run `devstack update` to upgrade'
    end
  end

  def compose_file
    @compose_file ||= root.join(@config_file).to_s
  end

  def dependencies
    @dependencies ||= YAML.safe_load(File.read(root.join('sets.yml')))
  end

  def root
    @root ||= Pathname(File.expand_path('../..', this_file))
  end

  def this_file
    if @this_file.nil?
      @this_file = __FILE__
      @this_file = File.readlink(@this_file) while File.symlink?(@this_file)
    end
    @this_file
  end

  def cmdline
    (['docker-compose', '-f', compose_file] + context.argv + context.services + context.argz).tap do |result|
      result << '-v' if context.test_mode && (['down', '-v'] & context.argv == ['down'])
    end
  end

  def trap_cmd
    return [] unless ['up', '-d'] & context.argv == ['up']
    ['docker-compose', '-f', compose_file, 'down'].tap do |result|
      result << '-v' if context.test_mode
    end
  end

  def exec!
    warn cmdline.inspect if context.flags.include?('-d')
    begin
      Kernel.system(*cmdline)
    rescue Interrupt # rubocop:disable Lint/HandleExceptions
      # Let it go
    ensure
      final_cmd = trap_cmd
      Kernel.system(*final_cmd) unless final_cmd.empty?
    end
  end

  def update!
    Dir.chdir(root.to_s) do
      `git pull origin`
      `docker-compose -f #{compose_file} pull`
    end
    display_version
  end

  def run!
    if (context.flags & ['-h', '--help']).any? || context.argv.empty? || (context.argv == ['help'] && context.argz.empty?)
      display_usage
      exit 1
    end

    case context.argv.first
    when 'version', '-v', '--version'
      display_version
    when 'update'
      update!
    else
      exec!
    end
  end
end

DevStack.new(ARGV).run!
